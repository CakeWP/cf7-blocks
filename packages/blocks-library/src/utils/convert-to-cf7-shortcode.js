/**
 * WordPress Dependencies
 */
import { sprintf } from '@wordpress/i18n';
import { isEmpty, castArray } from 'lodash';

/**
 * Custom Dependencies
 */
import { CF7BLOCKS_RANGE_SUPPORTED_INPUT_TYPES } from '../constants';

/**
 * Creates/Converts the given attributes into CF7 shortcode.
 *
 * @param {object} attributes - Block attributes.
 *
 * @return {string} - CF7 Shortcode.
 */
export function convertFieldBlockToCF7Shortcode( attributes ) {
	const {
		id,
		type,
		name,
		minimum,
		maximum,
		isRequired,
		initialValue,
		autogeneratedName,
		useDefaultValueAsPlaceholder,
	} = attributes;

	const fieldName = isEmpty( name ) ? autogeneratedName : name;

	const hasInitialValue = ! isEmpty( initialValue );
	const initialValueCode = useDefaultValueAsPlaceholder
		? ` placeholder "${ initialValue }"`
		: ` "${ initialValue }"`;

	let shortcodeAttributes = castArray( type ); // [ type ]

	if ( isRequired ) {
		shortcodeAttributes.push( '*' );
	}

	shortcodeAttributes.push( ' ', fieldName );

	if ( ! isEmpty( id ) ) {
		shortcodeAttributes.push( ' ', 'id:'.concat( id ) );
	}

	if ( hasInitialValue ) {
		shortcodeAttributes.push( initialValueCode );
	}

	const isRangeSupported = Object.keys(
		CF7BLOCKS_RANGE_SUPPORTED_INPUT_TYPES
	).includes( type );

	if ( isRangeSupported ) {
		if ( ! isEmpty( minimum ) ) {
			shortcodeAttributes.push( ' ', 'min:' + minimum );
		}

		if ( ! isEmpty( maximum ) ) {
			shortcodeAttributes.push( ' ', 'max:' + maximum );
		}
	}

	return sprintf( '[%1$s]', shortcodeAttributes.join( '' ) );
}

/**
 * Converts the submit block to contact form 7 shortcode.
 *
 * @param {object} attributes - Block attributes.
 * @return {string} - CF7 Shortcode.
 */
export function convertSubmitBlockToCF7Shortcode( attributes ) {
	const { id, label } = attributes;
	const shortcodeAttributes = castArray( 'submit' );
	if ( ! isEmpty( id ) ) {
		shortcodeAttributes.push( ' ', 'id:'.concat( id ) );
	}

	shortcodeAttributes.push(
		' ',
		isEmpty( label ) ? 'Submit' : `"${ label }"`
	);

	return sprintf( '[%1$s]', shortcodeAttributes.join( '' ) );
}
/**
 * Converts the checkbox/radio block to contact form 7 shortcode.
 *
 * @param {object} attributes - Block attributes.
 * @return {string} - CF7 Shortcode.
 */
export function convertSelectionBlockToCF7Shortcode( attributes ) {
	//[select* menu-970 id:asd multiple include_blank "ha" "a" "s"]
	const {
		type,
		id,
		items,
		name,
		isLabelFirst,
		isRequired,
		isMultipleSelect,
		isFirstBlankItem,
		autogeneratedName,
	} = attributes;

	const fieldName = isEmpty( name ) ? autogeneratedName : name;

	let shortcodeAttributes = castArray( type ); // [ type ]

	if ( ( isRequired && type === 'checkbox' ) || type === 'select' ) {
		shortcodeAttributes.push( '*' );
	}

	shortcodeAttributes.push( ' ', fieldName );
	if ( type === 'radio' ) {
		shortcodeAttributes.push( ' ', 'default:1' );
	}
	if ( ! isEmpty( id ) ) {
		shortcodeAttributes.push( ' ', 'id:'.concat( id ) );
	}

	if ( isLabelFirst ) {
		shortcodeAttributes.push( ' ', 'label_first' );
	}
	if ( type === 'select' ) {
		if ( isFirstBlankItem ) {
			shortcodeAttributes.push( ' ', 'include_blank' );
		}
		if ( isMultipleSelect ) {
			shortcodeAttributes.push( ' ', 'multiple' );
		}
	}
	const options = items
		.map( ( item ) =>
			item.label.trim() !== '' ? `"${ item.label }"` : ''
		)
		.join( ' ' )
		.trim();
	shortcodeAttributes.push( ' ', options );

	return sprintf( '[%1$s]', shortcodeAttributes.join( '' ) );
}

/**
 * Converts the acceptance block to contact form 7 shortcode.
 *
 * @param {object} attributes - Block attributes.
 * @return {string} - CF7 Shortcode.
 */
export function convertAcceptanceBlockToCF7Shortcode( attributes ) {
	const { id, condition, isOptional, autogeneratedName, name } = attributes;

	const shortcodeAttributes = castArray( 'acceptance' );
	if ( ! isEmpty( id ) ) {
		shortcodeAttributes.push( ' ', 'id:'.concat( id ) );
	}

	const fieldName = isEmpty( name ) ? autogeneratedName : name;
	shortcodeAttributes.push( ' ', fieldName );

	if ( isOptional ) {
		shortcodeAttributes.push( ' ', 'optional' );
	}

	const fieldCondition = isEmpty( condition )
		? ''
		: `${ condition } [/acceptance]`;

	return sprintf(
		'[%1$s] %2$s',
		shortcodeAttributes.join( '' ),
		fieldCondition
	);
}
