/**
 * WordPress Dependencies
 */
import { isEmpty } from 'lodash';
import { __ } from '@wordpress/i18n';
import { trash } from '@wordpress/icons';
import { useEffect } from '@wordpress/element';
import { RichText } from '@wordpress/block-editor';
import { IconButton } from '@wordpress/components';
/**
 * Custom Dependencies
 */
import generateFieldName from '../../utils/generate-name';

function EditMode( props ) {
	const { label, index } = props;
	const {
		id,
		type,
		name,
		isLabelFirst,
		isRequired,
		isChecked,
		autogeneratedName,
		selectionItem,
	} = props.attributes;

	useEffect( () => {
		// Generating a new field name, if needed.
		if (
			isEmpty( autogeneratedName ) ||
			! autogeneratedName.startsWith( type )
		) {
			const newAutogeneratedName = generateFieldName( type );
			props.setAttributes( { autogeneratedName: newAutogeneratedName } );
		}
	}, [ type ] );

	const updateLabel = ( newLabel ) => {
		return selectionItem.map( ( item, itemIndex ) => {
			return {
				label: index === itemIndex ? newLabel : item.label,
				isChecked: item.isChecked,
			};
		} );
	};

	const Label = () => {
		return (
			<RichText
				tagName="label"
				value={ label }
				placeholder={ __( 'Add Label', 'cf7-blocks' ) }
				onChange={ ( newLabel ) =>
					props.setAttributes( {
						selectionItem: updateLabel( newLabel ),
					} )
				}
			/>
		);
	};
	return (
		<div class={ `cf7blocks-${ type }` }>
			{ isLabelFirst && <Label /> }
			<input
				id={ id }
				type={ type }
				form="gutenberg"
				checked={ isChecked }
				name={ name }
				isRequired={ isRequired }
			/>
			{ ! isLabelFirst && <Label /> }
			<IconButton icon={ trash }></IconButton>
		</div>
	);
}

export default EditMode;
