/**
 * WordPress Dependencies
 */
import { isEmpty } from 'lodash';
import { __ } from '@wordpress/i18n';
import { useEffect } from '@wordpress/element';
import { useBlockProps, RichText } from '@wordpress/block-editor';

/**
 * Custom Dependencies
 */
import Toolbar from './toolbar';
import Inspector from './inspector';
import classnames from 'classnames';
import PreviewMode from './components/preview-mode';
import EditMode from './components/edit-mode';
import generateFieldName from '../utils/generate-name';

export default function edit( props ) {
	const blockProps = useBlockProps( {
		className: classnames( {
			[ `cf7-block-${ props.attributes.type }` ]: true,
			'cf7-block-selection-field-editing': props.isSelected,
		} ),
	} );

	const {
		id,
		type,
		name,
		items,
		mainLabel,
		showLabel,
		isRequired,
		isLabelFirst,
		requiredText,
		autogeneratedName,
	} = props.attributes;

	useEffect( () => {
		// Generating a new field name, if needed.
		if (
			isEmpty( autogeneratedName ) ||
			! autogeneratedName.startsWith( type )
		) {
			const newAutogeneratedName = generateFieldName( type );
			props.setAttributes( { autogeneratedName: newAutogeneratedName } );
		}
	}, [ type ] );

	return (
		<>
			<div { ...blockProps }>
				{ showLabel && (
					<div className="cf7blocks-selection-base-main-label-wrapper">
						<RichText
							tagName="label"
							value={ mainLabel }
							className="cf7blocks-selection-base-main-label"
							placeholder={ __( 'Add Label', 'cf7-blocks' ) }
							onChange={ ( newMainLabel ) =>
								props.setAttributes( {
									mainLabel: newMainLabel,
								} )
							}
						/>
						{ isRequired && <span>{ requiredText }</span> }
					</div>
				) }
				{ ! props.isSelected ? (
					<PreviewMode
						id={ id }
						type={ type }
						name={ name }
						items={ items }
						mainLabel={ mainLabel }
						showLabel={ showLabel }
						isRequired={ isRequired }
						isLabelFirst={ isLabelFirst }
						autogeneratedName={ autogeneratedName }
					/>
				) : (
					<EditMode
						id={ id }
						type={ type }
						name={ name }
						items={ items }
						mainLabel={ mainLabel }
						showLabel={ showLabel }
						isRequired={ isRequired }
						isLabelFirst={ isLabelFirst }
						autogeneratedName={ autogeneratedName }
						onUpdate={ ( newItems ) =>
							props.setAttributes( { items: newItems } )
						}
					/>
				) }
			</div>
			<Toolbar { ...props } />
			<Inspector { ...props } />
		</>
	);
}
