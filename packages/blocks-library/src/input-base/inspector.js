/**
 * WordPress Dependencies
 */
import { __, sprintf } from '@wordpress/i18n';
import { PanelBody, TextControl, ToggleControl } from '@wordpress/components';
import {
	InspectorControls,
	InspectorAdvancedControls,
} from '@wordpress/block-editor';

/**
 * Custom Dependencies
 */
import {
	CF7BLOCKS_RANGE_SUPPORTED_INPUT_TYPES,
	CF7BLOCKS_PLACEHOLDER_SUPPORTED_TYPES,
} from '../constants';
import { convertFieldBlockToCF7Shortcode } from '../utils/convert-to-cf7-shortcode';

function Inspector( props ) {
	const {
		id,
		type,
		name,
		minimum,
		maximum,
		showLabel,
		isRequired,
		initialValue,
		autogeneratedName,
		useDefaultValueAsPlaceholder,
	} = props.attributes;

	const isRangeSupported = Object.keys(
		CF7BLOCKS_RANGE_SUPPORTED_INPUT_TYPES
	).includes( type );

	const isPlaceholderSupported = CF7BLOCKS_PLACEHOLDER_SUPPORTED_TYPES.includes(
		type
	);

	const isFileInput = type === 'file';

	return (
		<>
			<InspectorControls>
				<PanelBody title={ __( 'Generated Shortcode', 'cf7-blocks' ) }>
					<code>
						{ convertFieldBlockToCF7Shortcode( props.attributes ) }
					</code>
				</PanelBody>
				<PanelBody title={ __( 'General', 'cf7-blocks' ) }>
					<TextControl
						value={ name }
						label={ __( 'Name', 'cf7-blocks' ) }
						placeholder={ autogeneratedName }
						help={ __(
							'Assign a unique field name',
							'cf7-blocks'
						) }
						onChange={ ( newName ) => {
							const normalizedName = newName
								.toLowerCase()
								.replace( ' ', '-' );

							props.setAttributes( { name: normalizedName } );
						} }
					/>
					{ ! isFileInput && (
						<TextControl
							value={ initialValue }
							label={ __( 'Default Value', 'cf7-blocks' ) }
							onChange={ ( newInitialValue ) =>
								props.setAttributes( {
									initialValue: newInitialValue,
								} )
							}
						/>
					) }
					{ isPlaceholderSupported && (
						<ToggleControl
							value={ useDefaultValueAsPlaceholder }
							checked={ useDefaultValueAsPlaceholder }
							label={ __(
								'Use value as placeholder',
								'cf7-blocks'
							) }
							help={ __(
								'Use the default value as the field placeholder.',
								'cf7-blocks'
							) }
							onChange={ ( newStatus ) =>
								props.setAttributes( {
									useDefaultValueAsPlaceholder: newStatus,
								} )
							}
						/>
					) }
					<ToggleControl
						checked={ isRequired }
						onChange={ ( newRequired ) =>
							props.setAttributes( { isRequired: newRequired } )
						}
						label={ __( 'Required', 'cf7-blocks' ) }
						help={ __(
							'Marks the field as required.',
							'cf7-blocks'
						) }
					/>
					<ToggleControl
						checked={ showLabel }
						onChange={ ( newShowLabel ) =>
							props.setAttributes( { showLabel: newShowLabel } )
						}
						label={ __( 'Label', 'cf7-blocks' ) }
						help={ __(
							'Displays an additional label above the field.',
							'cf7-blocks'
						) }
					/>
				</PanelBody>
				{ isRangeSupported && (
					<PanelBody title={ __( 'Range', 'cf7-blocks' ) }>
						<TextControl
							type={
								CF7BLOCKS_RANGE_SUPPORTED_INPUT_TYPES[ type ]
							}
							label={ __( 'Minimum', 'cf7-blocks' ) }
							value={ minimum }
							onChange={ ( newMinimum ) =>
								props.setAttributes( { minimum: newMinimum } )
							}
							help={ sprintf(
								__(
									'Minimum %s a user can input',
									'cf7-blocks'
								),
								type
							) }
						/>
						<TextControl
							type={
								CF7BLOCKS_RANGE_SUPPORTED_INPUT_TYPES[ type ]
							}
							value={ maximum }
							onChange={ ( newMaximum ) =>
								props.setAttributes( { maximum: newMaximum } )
							}
							label={ __( 'Maximum', 'cf7-blocks' ) }
							help={ sprintf(
								__(
									'Maximum %s a user can input',
									'cf7-blocks'
								),
								type
							) }
						/>
					</PanelBody>
				) }
			</InspectorControls>
			<InspectorAdvancedControls>
				<TextControl
					value={ id }
					label={ __( 'Unique Id', 'cf7-blocks' ) }
					help={ __( 'Add a unique id attribute.', 'cf7-blocks' ) }
					onChange={ ( newId ) => {
						const idWithoutSpace = newId.replace( ' ', '' );
						props.setAttributes( { id: idWithoutSpace } );
					} }
				/>
			</InspectorAdvancedControls>
		</>
	);
}

export default Inspector;
